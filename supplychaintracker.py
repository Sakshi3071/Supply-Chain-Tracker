# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xP4cabN5RuQqnRWjkkkQqQ72kVdf5NtK
"""

import hashlib
import time

# ------------------------------
# Block structure for the Blockchain
# ------------------------------
class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        """
        Initialize a new block in the blockchain.

        :param index: Position of the block in the chain
        :param timestamp: Time when the block is created
        :param data: Supply chain transaction details
        :param previous_hash: Hash of the previous block
        """
        self.index = index
        self.timestamp = timestamp
        self.data = data  # Supply chain transaction info
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()  # Unique hash for this block

    def calculate_hash(self):
        """
        Calculate the SHA-256 hash of the block's contents.
        """
        block_string = (
            str(self.index) +
            str(self.timestamp) +
            str(self.data) +
            str(self.previous_hash)
        )
        return hashlib.sha256(block_string.encode()).hexdigest()

# ------------------------------
# Blockchain structure
# ------------------------------
class Blockchain:
    def __init__(self):
        """
        Initialize the blockchain with a genesis block.
        """
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        """
        Create the very first block of the blockchain.
        """
        return Block(0, time.ctime(), "Genesis Block - Product Created", "0")

    def get_latest_block(self):
        """
        Get the most recently added block in the chain.
        """
        return self.chain[-1]

    def add_block(self, data):
        """
        Add a new block to the blockchain.

        :param data: Transaction details (e.g., supply chain movement)
        """
        previous_block = self.get_latest_block()
        new_block = Block(
            index=len(self.chain),
            timestamp=time.ctime(),
            data=data,
            previous_hash=previous_block.hash
        )
        self.chain.append(new_block)

    def display_chain(self):
        """
        Print the entire blockchain in a readable format.
        """
        for block in self.chain:
            print("---------------------------------------------------")
            print(f"Block Index: {block.index}")
            print(f"Timestamp: {block.timestamp}")
            print(f"Data (Transaction): {block.data}")
            print(f"Previous Hash: {block.previous_hash}")
            print(f"Hash: {block.hash}")

# ------------------------------
# Demo: Supply Chain Simulation
# ------------------------------
supply_chain = Blockchain()

# Simulating product journey across supply chain stages
supply_chain.add_block("Manufacturer → Distributor")
supply_chain.add_block("Distributor → Retailer")
supply_chain.add_block("Retailer → Customer")

# Display the entire blockchain
supply_chain.display_chain()
